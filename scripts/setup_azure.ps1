# Script de configuration Azure pour SEEG-AI (Windows PowerShell)
# Ce script vous guide pour r√©cup√©rer les informations Azure n√©cessaires

Write-Host "üî∑ Configuration Azure - SEEG-AI" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# Fonction pour afficher des √©tapes
function Show-Step {
    param($number, $title)
    Write-Host ""
    Write-Host "[$number] $title" -ForegroundColor Yellow
    Write-Host ("-" * 60) -ForegroundColor Gray
}

# V√©rifier si Azure CLI est install√©
Show-Step "0" "V√©rification Azure CLI"
try {
    $azVersion = az version --output json | ConvertFrom-Json
    Write-Host "‚úì Azure CLI install√©: $($azVersion.'azure-cli')" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Azure CLI n'est pas install√©" -ForegroundColor Red
    Write-Host "Installez-le depuis: https://aka.ms/installazurecliwindows" -ForegroundColor Yellow
    exit 1
}

# √âtape 1: Connexion √† Azure
Show-Step "1" "Connexion √† Azure"
Write-Host "Ex√©cutez cette commande pour vous connecter :" -ForegroundColor White
Write-Host "az login" -ForegroundColor Cyan
Write-Host ""
Read-Host "Appuyez sur Entr√©e apr√®s vous √™tre connect√©"

# V√©rifier la connexion
$account = az account show --output json 2>$null | ConvertFrom-Json
if ($account) {
    Write-Host "‚úì Connect√© en tant que: $($account.user.name)" -ForegroundColor Green
    Write-Host "‚úì Abonnement: $($account.name)" -ForegroundColor Green
    Write-Host "‚úì ID: $($account.id)" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Non connect√©. Ex√©cutez 'az login' d'abord." -ForegroundColor Red
    exit 1
}

# √âtape 2: Lister les Resource Groups
Show-Step "2" "Resource Groups Disponibles"
Write-Host "Liste de vos resource groups :" -ForegroundColor White
az group list --query "[].{Name:name, Location:location}" --output table

Write-Host ""
$rgName = Read-Host "Entrez le nom du resource group √† utiliser (ou cr√©er)"

# V√©rifier si le RG existe
$rgExists = az group exists --name $rgName
if ($rgExists -eq "false") {
    Write-Host "‚ö†Ô∏è  Le resource group '$rgName' n'existe pas." -ForegroundColor Yellow
    $createRg = Read-Host "Voulez-vous le cr√©er? (oui/non)"
    if ($createRg -eq "oui") {
        $location = Read-Host "Entrez la location (ex: francecentral, westeurope)"
        az group create --name $rgName --location $location
        Write-Host "‚úì Resource group cr√©√©" -ForegroundColor Green
    }
}

# √âtape 3: Azure Document Intelligence
Show-Step "3" "Azure Document Intelligence (OCR)"

Write-Host "Recherche des ressources Document Intelligence existantes..." -ForegroundColor White
$docIntelResources = az cognitiveservices account list `
    --resource-group $rgName `
    --query "[?kind=='FormRecognizer'].{Name:name, Location:location, Sku:sku.name}" `
    --output json 2>$null | ConvertFrom-Json

if ($docIntelResources) {
    Write-Host "‚úì Ressources trouv√©es :" -ForegroundColor Green
    $docIntelResources | ForEach-Object { 
        Write-Host "  - $($_.Name) ($($_.Location)) - SKU: $($_.Sku)" -ForegroundColor Cyan
    }
    Write-Host ""
    $useExisting = Read-Host "Utiliser une ressource existante? (oui/non)"
    
    if ($useExisting -eq "oui") {
        $docIntelName = Read-Host "Entrez le nom de la ressource √† utiliser"
    }
    else {
        $docIntelName = $null
    }
}
else {
    Write-Host "‚ö†Ô∏è  Aucune ressource Document Intelligence trouv√©e." -ForegroundColor Yellow
    $docIntelName = $null
}

if (-not $docIntelName) {
    Write-Host ""
    Write-Host "Cr√©ation d'une nouvelle ressource Document Intelligence..." -ForegroundColor Yellow
    $docIntelName = Read-Host "Nom de la ressource (ex: seeg-document-intelligence)"
    $location = Read-Host "Location (ex: francecentral, westeurope)"
    $sku = Read-Host "SKU (S0 pour production, F0 pour gratuit)"
    
    Write-Host "Cr√©ation en cours..." -ForegroundColor Yellow
    az cognitiveservices account create `
        --name $docIntelName `
        --resource-group $rgName `
        --kind FormRecognizer `
        --sku $sku `
        --location $location `
        --yes
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úì Ressource cr√©√©e avec succ√®s" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå Erreur lors de la cr√©ation" -ForegroundColor Red
        exit 1
    }
}

# R√©cup√©rer l'endpoint et la cl√©
Write-Host ""
Write-Host "R√©cup√©ration des informations..." -ForegroundColor Yellow

$docIntelEndpoint = az cognitiveservices account show `
    --name $docIntelName `
    --resource-group $rgName `
    --query "properties.endpoint" `
    --output tsv

$docIntelKey = az cognitiveservices account keys list `
    --name $docIntelName `
    --resource-group $rgName `
    --query "key1" `
    --output tsv

Write-Host "‚úì Endpoint: $docIntelEndpoint" -ForegroundColor Green
Write-Host "‚úì Key: $($docIntelKey.Substring(0,10))..." -ForegroundColor Green

# √âtape 4: Azure Cosmos DB
Show-Step "4" "Azure Cosmos DB (MongoDB API)"

Write-Host "Recherche des bases Cosmos DB existantes..." -ForegroundColor White
$cosmosAccounts = az cosmosdb list `
    --resource-group $rgName `
    --query "[].{Name:name, Location:location}" `
    --output json 2>$null | ConvertFrom-Json

if ($cosmosAccounts) {
    Write-Host "‚úì Comptes Cosmos DB trouv√©s :" -ForegroundColor Green
    $cosmosAccounts | ForEach-Object { 
        Write-Host "  - $($_.Name) ($($_.Location))" -ForegroundColor Cyan
    }
    Write-Host ""
    $cosmosName = Read-Host "Entrez le nom du compte √† utiliser (ou laissez vide pour en cr√©er un)"
}
else {
    Write-Host "‚ö†Ô∏è  Aucun compte Cosmos DB trouv√©." -ForegroundColor Yellow
    $cosmosName = $null
}

if (-not $cosmosName -or $cosmosName -eq "") {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Cr√©ation d'un Cosmos DB (MongoDB API) peut prendre 5-10 minutes" -ForegroundColor Yellow
    $createCosmos = Read-Host "Voulez-vous cr√©er un nouveau compte Cosmos DB? (oui/non)"
    
    if ($createCosmos -eq "oui") {
        $cosmosName = Read-Host "Nom du compte (ex: seeg-ai)"
        $location = Read-Host "Location (ex: francecentral)"
        
        Write-Host "Cr√©ation en cours (cela peut prendre plusieurs minutes)..." -ForegroundColor Yellow
        az cosmosdb create `
            --name $cosmosName `
            --resource-group $rgName `
            --kind MongoDB `
            --server-version 7.0 `
            --locations regionName=$location `
            --default-consistency-level Session
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úì Cosmos DB cr√©√© avec succ√®s" -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå Erreur lors de la cr√©ation" -ForegroundColor Red
            $cosmosName = $null
        }
    }
    else {
        $cosmosName = $null
    }
}

$cosmosConnectionString = $null
if ($cosmosName) {
    Write-Host ""
    Write-Host "R√©cup√©ration de la cha√Æne de connexion..." -ForegroundColor Yellow
    
    $cosmosKeys = az cosmosdb keys list `
        --name $cosmosName `
        --resource-group $rgName `
        --type connection-strings `
        --output json | ConvertFrom-Json
    
    $cosmosConnectionString = $cosmosKeys.connectionStrings[0].connectionString
    
    Write-Host "‚úì Cha√Æne de connexion r√©cup√©r√©e" -ForegroundColor Green
}

# √âtape 5: G√©n√©ration du fichier .env
Show-Step "5" "G√©n√©ration du fichier .env"

$envContent = @"
# ====================================
# Azure Document Intelligence
# ====================================
AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT=$docIntelEndpoint
AZURE_DOCUMENT_INTELLIGENCE_KEY=$docIntelKey

# ====================================
# Supabase
# ====================================
SUPABASE_URL=https://fyiitzndlqcnyluwkpqp.supabase.co
SUPABASE_SERVICE_ROLE_KEY=
SUPABASE_BUCKET_NAME=candidats-documents

# ====================================
# MongoDB / Cosmos DB
# ====================================

"@

if ($cosmosConnectionString) {
    $envContent += @"
# PRODUCTION avec Azure Cosmos DB
MONGODB_CONNECTION_STRING=$cosmosConnectionString
MONGODB_DATABASE=SEEG-AI
MONGODB_COLLECTION=candidats

# Pour d√©veloppement local (commenter la ligne ci-dessus et d√©commenter ci-dessous)
# MONGODB_CONNECTION_STRING=mongodb://Sevan:Sevan@Seeg@localhost:27017
"@
}
else {
    $envContent += @"
# D√âVELOPPEMENT LOCAL (Docker)
MONGODB_CONNECTION_STRING=mongodb://Sevan:Sevan@Seeg@localhost:27017
MONGODB_DATABASE=SEEG-AI
MONGODB_COLLECTION=candidats

# Pour production Cosmos DB (remplir apr√®s cr√©ation)
# MONGODB_CONNECTION_STRING=mongodb+srv://...
"@
}

$envContent += @"


# ====================================
# Application Settings
# ====================================
LOG_LEVEL=INFO
DATA_FOLDER=./data
TEMP_FOLDER=./temp
API_HOST=0.0.0.0
API_PORT=8000
"@

# Sauvegarder le fichier
$envContent | Out-File -FilePath ".env" -Encoding UTF8

Write-Host "‚úì Fichier .env cr√©√© avec succ√®s!" -ForegroundColor Green

# R√©sum√©
Show-Step "‚úÖ" "R√©sum√© de la Configuration"

Write-Host "Resource Group:" -ForegroundColor White
Write-Host "  $rgName" -ForegroundColor Cyan
Write-Host ""

Write-Host "Document Intelligence:" -ForegroundColor White
Write-Host "  Nom: $docIntelName" -ForegroundColor Cyan
Write-Host "  Endpoint: $docIntelEndpoint" -ForegroundColor Cyan
Write-Host ""

if ($cosmosName) {
    Write-Host "Cosmos DB:" -ForegroundColor White
    Write-Host "  Nom: $cosmosName" -ForegroundColor Cyan
    Write-Host "  Connection: Configur√©e dans .env" -ForegroundColor Cyan
}
else {
    Write-Host "Cosmos DB:" -ForegroundColor White
    Write-Host "  Non configur√© - utilisation de MongoDB local" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "‚úÖ Configuration termin√©e!" -ForegroundColor Green
Write-Host ""
Write-Host "Prochaines √©tapes:" -ForegroundColor White
Write-Host "  1. V√©rifiez le fichier .env cr√©√©" -ForegroundColor Gray
Write-Host "  2. Lancez: docker-compose up -d" -ForegroundColor Gray
Write-Host "  3. Testez: python main.py" -ForegroundColor Gray
Write-Host ""

