"""
API FastAPI pour consulter les candidatures
"""
from typing import List, Optional
from fastapi import FastAPI, Query, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from src.logger import app_logger as logger
from src.database.mongodb_client import mongodb_client
from src.models import Candidature


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestion du cycle de vie de l'application"""
    # D√©marrage
    logger.info("üöÄ D√©marrage de l'API SEEG-AI")
    mongodb_client.connect()
    logger.success("‚úì API pr√™te")
    
    yield
    
    # Arr√™t
    logger.info("‚èπÔ∏è  Arr√™t de l'API")
    mongodb_client.close()


# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="SEEG-AI API",
    description="API de consultation des candidatures trait√©es par OCR",
    version="1.0.0",
    lifespan=lifespan
)

# Configuration CORS (acc√®s public)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Permet toutes les origines (API publique)
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    """Point d'entr√©e racine de l'API"""
    return {
        "message": "Bienvenue sur l'API SEEG-AI",
        "version": "1.0.0",
        "endpoints": {
            "candidatures": "/candidatures",
            "search": "/candidatures/search?first_name=XXX&last_name=YYY",
            "health": "/health"
        }
    }


@app.get("/health")
async def health_check():
    """V√©rification de l'√©tat de sant√© de l'API"""
    try:
        # Test de connexion MongoDB
        mongodb_client.collection.find_one()
        
        return {
            "status": "healthy",
            "database": "connected"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(
            status_code=503,
            detail="Service unavailable"
        )


@app.get("/candidatures", response_model=List[Candidature])
async def get_all_candidatures():
    """
    R√©cup√®re toutes les candidatures
    
    Returns:
        Liste de toutes les candidatures stock√©es dans MongoDB
    """
    try:
        logger.info("üìã R√©cup√©ration de toutes les candidatures")
        
        candidatures = mongodb_client.get_all_candidatures()
        
        logger.success(f"‚úì {len(candidatures)} candidatures retourn√©es")
        
        return candidatures
        
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration candidatures: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la r√©cup√©ration des candidatures: {str(e)}"
        )


@app.get("/candidatures/search", response_model=List[Candidature])
async def search_candidatures(
    first_name: Optional[str] = Query(
        None,
        description="Pr√©nom du candidat √† rechercher (insensible √† la casse)"
    ),
    last_name: Optional[str] = Query(
        None,
        description="Nom du candidat √† rechercher (insensible √† la casse)"
    )
):
    """
    Recherche des candidatures par nom et/ou pr√©nom
    
    Args:
        first_name: Pr√©nom √† rechercher (optionnel)
        last_name: Nom √† rechercher (optionnel)
    
    Returns:
        Liste des candidatures correspondant aux crit√®res de recherche
    
    Examples:
        - /candidatures/search?first_name=Sevan
        - /candidatures/search?last_name=Kedesh
        - /candidatures/search?first_name=Sevan&last_name=Kedesh
    """
    try:
        # Validation : au moins un param√®tre requis
        if not first_name and not last_name:
            raise HTTPException(
                status_code=400,
                detail="Au moins un param√®tre (first_name ou last_name) est requis"
            )
        
        logger.info(
            f"üîç Recherche candidatures: "
            f"first_name={first_name}, last_name={last_name}"
        )
        
        candidatures = mongodb_client.search_candidatures(
            first_name=first_name,
            last_name=last_name
        )
        
        logger.success(f"‚úì {len(candidatures)} candidatures trouv√©es")
        
        return candidatures
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur recherche candidatures: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la recherche: {str(e)}"
        )


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Gestionnaire d'erreurs global"""
    logger.error(f"Erreur non g√©r√©e: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Une erreur interne s'est produite",
            "detail": str(exc)
        }
    )

